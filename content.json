{"meta":{"title":"Craff Ming","subtitle":null,"description":"我也不知道要写点什么。。。","author":"Craff Ming","url":"https://shaojiaming.github.io"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2017-03-19T05:31:18.911Z","updated":"2017-03-19T05:31:18.911Z","comments":false,"path":"/404.html","permalink":"https://shaojiaming.github.io//404.html","excerpt":"","text":".article-header { padding: 0; padding-top: 26px; border-left: none; text-align: center; } .article-header:hover { border-left: none; } .article-title { font-size: 2.1em; } strong a { color: #747474; } .article-meta { display: none; } .share { display: none; } .ds-meta { display: none; } .player { margin-left: -10px; } .sign { text-align: right; font-style: italic; } #page-visit { display: none; } .center { text-align: center; height: 2.5em; font-weight: bold; } .article-entry hr { margin: 0; } .pic { text-align: center; margin: 0; } .pic br { display: none; } #container .article-info-post.article-info { display: none; } #container .article .article-title { padding: 0; }"},{"title":"tags","date":"2017-03-18T13:20:06.000Z","updated":"2017-03-18T13:20:06.389Z","comments":true,"path":"tags/index.html","permalink":"https://shaojiaming.github.io/tags/index.html","excerpt":"","text":""},{"title":"about","date":"2017-03-18T13:20:57.000Z","updated":"2017-03-18T13:20:57.740Z","comments":true,"path":"about/index.html","permalink":"https://shaojiaming.github.io/about/index.html","excerpt":"","text":""}],"posts":[{"title":"JavaScript学习笔记","slug":"JavaScript学习随笔","date":"2017-03-19T07:17:00.000Z","updated":"2017-03-19T09:02:12.355Z","comments":true,"path":"2017/03/19/JavaScript学习随笔/","link":"","permalink":"https://shaojiaming.github.io/2017/03/19/JavaScript学习随笔/","excerpt":"本文是自己学习新技能时的随笔，记录学习过程中自己认为重要的或者是感觉使用的一些知识点，以备不时之需。而且这是我第一次写博客，还有点小激动呢~(≧▽≦)/~ 学习资料来源：W3Cshjool","text":"本文是自己学习新技能时的随笔，记录学习过程中自己认为重要的或者是感觉使用的一些知识点，以备不时之需。而且这是我第一次写博客，还有点小激动呢~(≧▽≦)/~ 学习资料来源：W3Cshjool E-mail验证 12345678910111213141516171819202122232425262728293031&lt;html&gt;&lt;head&gt;&lt;script type=\"text/javascript\"&gt;function validate_email(field,alerttxt)&#123; with (field)&#123; apos=value.indexOf(\"@\") // indexOf() 来定位字符串中某一个指定的字符首次出现的位置。 dotpos=value.lastIndexOf(\".\") if (apos&lt;1||dotpos-apos&lt;2) &#123; alert(alerttxt);return false&#125; else &#123; return true&#125; &#125;&#125;function validate_form(thisform)&#123; with (thisform)&#123; if (validate_email(email,\"Not a valid e-mail address!\")==false)&#123; email.focus();return false&#125; &#125;&#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;form action=\"submitpage.htm\"onsubmit=\"return validate_form(this);\" method=\"post\"&gt;Email: &lt;input type=\"text\" name=\"email\" size=\"30\"&gt;&lt;input type=\"submit\" value=\"Submit\"&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; HTML事件123456789101112131415&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;script&gt;function changetext(id)&#123; id.innerHTML=\"谢谢!\";&#125;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;/*可以在函数中传this，指代当前的标签*/&lt;h1 onclick=\"changetext(this)\"&gt;请点击该文本&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt; onload 和 onunload 事件会在用户进入或离开页面时被触发。 onload 事件可用于检测访问者的浏览器类型和浏览器版本，并基于这些信息来加载网页的正确版本。 onload 和 onunload 事件可用于处理 cookie。 onmousedown 鼠标按下事件 onmouseup 鼠标释放事件创建新的 HTML 元素 12345678910111213&lt;div id=\"div1\"&gt;&lt;p id=\"p1\"&gt;这是一个段落&lt;/p&gt;&lt;p id=\"p2\"&gt;这是另一个段落&lt;/p&gt;&lt;/div&gt;&lt;script&gt;var para=document.createElement(\"p\"); //创建新的&lt;p&gt;标签var node=document.createTextNode(\"这是新段落。\"); //如需向 &lt;p&gt; 元素添加文本，您必须首先创建文本节点。这段代码创建了一个文本节点para.appendChild(node); //然后您必须向 &lt;p&gt; 元素追加这个文本节点var element=document.getElementById(\"div1\");element.appendChild(para); //这段代码向这个已有的元素追加新元素&lt;/script&gt; 删除HTML元素12345678910&lt;div id=\"div1\"&gt;&lt;p id=\"p1\"&gt;这是一个段落。&lt;/p&gt;&lt;p id=\"p2\"&gt;这是另一个段落。&lt;/p&gt;&lt;/div&gt;&lt;script&gt;var parent=document.getElementById(\"div1\");var child=document.getElementById(\"p1\");parent.removeChild(child);&lt;/script&gt; 对象构造器12345678910function person(firstname,lastname,age,eyecolor)&#123;this.firstname=firstname;this.lastname=lastname;this.age=age;this.eyecolor=eyecolor;&#125;var myFather=new person(\"Bill\",\"Gates\",56,\"blue\");var myMother=new person(\"Steve\",\"Jobs\",48,\"green\"); String对象实例 match() 来查找字符串中特定的字符，并且如果找到的话，则返回这个字符。 indexOf() 来定位字符串中某一个指定的字符首次出现的位置。 replace() 方法在字符串中用某些字符替换另一些字符。 1234&lt;script type=\"text/javascript\"&gt;var str=\"Visit Microsoft!\"document.write(str.replace(/Microsoft/,\"W3School\"))&lt;/script&gt; 更多方法参考 JavaScript String 对象参考手册 Number 对象参考手册，JavaScript Date 对象参考手册， JavaScript Array 对象参考手册 如果逻辑对象无初始值或者其值为 0、-0、null、””、false、undefined 或者 NaN，那么对象的值为 false。否则，其值为 true（即使当自变量为字符串 “false” 时）！ JavaScript Window - 浏览器对象模型Window 尺寸有三种方法能够确定浏览器窗口的尺寸（浏览器的视口，不包括工具栏和滚动条）。对于Internet Explorer、Chrome、Firefox、Opera 以及 Safari： window.innerHeight - 浏览器窗口的内部高度 window.innerWidth - 浏览器窗口的内部宽度对于 Internet Explorer 8、7、6、5： document.documentElement.clientHeight document.documentElement.clientWidth或者 document.body.clientHeight document.body.clientWidth 一些其他方法： window.open() - 打开新窗口 window.close() - 关闭当前窗口 window.moveTo() - 移动当前窗口 window.resizeTo() - 调整当前窗口的尺寸 其他一些对象（Screen，Location，History，Navigator，PopupAlert，Timing，Cookies）查看文档 更多内容参考 JavaScript 参考手册","categories":[{"name":"学习笔记","slug":"学习笔记","permalink":"https://shaojiaming.github.io/categories/学习笔记/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://shaojiaming.github.io/tags/JavaScript/"}]},{"title":"hexo主题开发学习笔记","slug":"hexo主题开发学习笔记","date":"2017-03-18T16:00:00.000Z","updated":"2017-03-19T15:16:52.048Z","comments":true,"path":"2017/03/19/hexo主题开发学习笔记/","link":"","permalink":"https://shaojiaming.github.io/2017/03/19/hexo主题开发学习笔记/","excerpt":"在搭建博客的过程中，遇到了一些主题上的bug，因看不懂代码（之前没接触过模版引擎），故简单的学习了一下hexo主题的开发。","text":"在搭建博客的过程中，遇到了一些主题上的bug，因看不懂代码（之前没接触过模版引擎），故简单的学习了一下hexo主题的开发。 准备工作开始之前需了解： 模版引擎 css预处理 hexo文档本文采用ejs为模版引擎，使用stylus为css预处理器。主题文件目录结构 文件名 说明 languages 语言文件，用于国际化 layout 页面模板文件 scripts Hexo 脚本 source 主题资源文件，包括页面样式，脚本，字体等 我们在 themes 中新建 theme-example 文件夹，然后新建 languages ， layout ， scripts 与 source 文件夹。 创建布局模版ejs页面文件 在layout中创建 layout.ejs文件(在这里把网站的各个部分整合到一起) 12345678910&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;%- partial('_partial/head') %&gt; //引入网页的头部 &lt;body&gt; &lt;%- partial('_partial/header') %&gt; //引入网页的导航 &lt;mainclass=\"main\"&gt; &lt;%- body%&gt; // index其中的内容填入 body 的位置 &lt;/main&gt; &lt;/body&gt;&lt;/html&gt; 在layout/_partial中创建 head.ejs文件(存放网站的声明和样式的引入) 123456&lt;head&gt; &lt;metahttp-equiv=\"content-type\"content=\"text/html; charset=utf-8\"&gt; &lt;metacontent=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0\"name=\"viewport\"&gt; &lt;title&gt;&lt;%= config.title%&gt;&lt;/title&gt; //这里引入了站点配置的title属性的值 &lt;%- css('css/style.css') %&gt; //引入网站所需要的样式，其他样式引入到style.css文件里面&lt;/head&gt; 在layout/_partial中创建 header.ejs文件(网站的导航) 1234567891011121314&lt;header class=\"header\"&gt; &lt;div class=\"blog-title\"&gt; &lt;a href=\"&lt;%- url_for() %&gt;\" class=\"logo\"&gt;&lt;%=config.title%&gt;&lt;/a&gt; &lt;/div&gt; &lt;nav class=\"navbar\"&gt; &lt;ul class=\"menu\"&gt; &lt;% for (var i in theme.menu)&#123; %&gt; //遍历出主题配置文件中menu的所有值 &lt;li class=\"menu-item\"&gt; &lt;a href=\"&lt;%- url_for(theme.menu[i]) %&gt;\" class=\"menu-item-link\"&gt;&lt;%= i %&gt;&lt;/a&gt; &lt;/li&gt; &lt;% &#125; %&gt; &lt;/ul&gt; &lt;/nav&gt;&lt;/header&gt; Flask Web 开发 链接 url_for 函数：url_for() 函数最简单的用法是以视图函数名作为参数，返回对应的URL。 在layout中创建 index.ejs文件(这个文件的内容会加载到layout的&lt;%- body %&gt;上)12345678910111213141516171819&lt;section class=\"posts\"&gt; &lt;% page.posts.each(function(post) &#123; %&gt; &lt;article class=\"post\"&gt; &lt;div class=\"post-title\"&gt; &lt;!-- 标题 --&gt; &lt;a class=\"post-title-link\" href=\"&lt;%- url_for(post.path) %&gt;\"&gt;&lt;%= post.title%&gt;&lt;/a&gt; &lt;/div&gt; &lt;!-- 摘要 --&gt; &lt;div class=\"post-content\"&gt; &lt;%- post.excerpt %&gt; &lt;/div&gt; &lt;div class=\"post-meta\"&gt; &lt;!-- 时间 --&gt; &lt;span class=\"post-time\"&gt;&lt;%- date(post.date, \"YYYY-MM-DD\") %&gt;&lt;/span&gt; &lt;/div&gt; &lt;/article&gt; &lt;% &#125;) %&gt;&lt;/section&gt;&lt;%- partial('_partial/paginator') %&gt; //引入分页 在这里将会使用到 page 这个变量。 page 会根据不同的页面拥有不同的属性。具体有什么属性，可以获取到哪些数据可以查看 这里 。那么这里我们会使用 page 变量的 posts 属性拿到文章数据的集合。 在layout中创建 post.ejs文件(这里是文章的详情页面) 1234567891011&lt;article class=\"post\"&gt; &lt;div class=\"post-title\"&gt; &lt;h2 class=\"title\"&gt;&lt;%= page.title%&gt;&lt;/h2&gt; &lt;/div&gt; &lt;div class=\"post-meta\"&gt; &lt;span class=\"post-time\"&gt;&lt;%- date(page.date, \"YYYY-MM-DD\") %&gt;&lt;/span&gt; &lt;/div&gt; &lt;div class=\"post-content\"&gt; &lt;%- page.content%&gt; //正文 &lt;/div&gt;&lt;/article&gt; 在layout中创建 archive.ejs文件(目录文件，同index一样会加载到layout的&lt;%- body %&gt;上*) 123456789101112&lt;section class=\"archive\"&gt; &lt;ul class=\"post-archive\"&gt; &lt;% page.posts.each(function(post) &#123; %&gt; &lt;li class=\"post-item\"&gt; &lt;span class=\"post-date\"&gt;&lt;%= date(post.date, \"YYYY-MM-DD\") %&gt;&lt;/span&gt; &lt;a class=\"post-title\" href=\"&lt;%- url_for(post.path) %&gt;\"&gt;&lt;%= post.title%&gt;&lt;/a&gt; &lt;/li&gt; &lt;% &#125;) %&gt; &lt;/ul&gt;&lt;/section&gt;&lt;%- partial('_partial/paginator') %&gt;&lt;/article&gt; 在layout/_partial中创建 paginator.ejs文件(分页文件) 12345678910&lt;% if(page.total &gt; 1)&#123; %&gt; &lt;nav class=\"page-nav\"&gt; &lt;!-- 分页的辅助函数 --&gt; &lt;%- paginator(&#123; prev_text: \"« Prev\", next_text: \"Next »\", &#125;) %&gt; &lt;/nav&gt;&lt;%&#125; %&gt;&lt;/article&gt; 在 index.ejs 中添加这个文件的内容：&lt;%-partial(&#39;_partial/paginator&#39;) %&gt;这里我们使用到了另外的一个辅助函数 paginator ，它能够帮助我们插入分页链接。 css样式文件所有的资源文件都存放在source下面，在source下面新建一个css文件夹用来存放所用到的css样式,并且都以.styl做后缀。 在css下建立style.styl文件(把所有的css样式都引入到里面) 12345678910111213body &#123; background-color: #F2F2F2; font-size: 1.25rem; line-height: 1.5;&#125;.container &#123; max-width: 960px; margin: 0 auto;&#125;@import \"_partial/header\";@import \"_partial/post\"; 在css文件下新建_partial文件夹(里面放引入在style的css样式)2.1 archive.styl 123456789101112131415161718192021222324252627.archive &#123; margin: 1em auto; padding: 30px 50px; background-color: #fff; border: 1px solid #ddd; box-shadow: 0 0 2px #ddd; .post-archive &#123; list-style: none; padding: 0; .post-item &#123; margin: 5px 0; .post-date &#123; display: inline-block; margin-right: 10px; color: #BABABA; &#125; .post-title &#123; color: #368CCB; text-decoration: none; &#125; &#125; &#125;&#125; 2.2 header.styl 1234567891011121314151617181920212223242526272829303132.header &#123; margin-top: 2em display: flex align-items: baseline justify-content: space-between .blog-title .logo &#123; color: #AAA; font-size: 2em; font-family: \"Comic Sans MS\",cursive,LiSu,sans-serif; text-decoration: none; &#125; .menu &#123; margin: 0; padding: 0; .menu-item &#123; display: inline-block; margin-right: 10px; &#125; .menu-item-link &#123; color: #AAA; text-decoration: none; &amp;:hover &#123; color: #368CCB; &#125; &#125; &#125;&#125; 2.3 post.styl 123456789101112131415161718192021222324252627282930313233.post &#123; margin: 1em auto; padding: 30px 50px; background-color: #fff; border: 1px solid #ddd; box-shadow: 0 0 2px #ddd;&#125;.posts &#123; .post:first-child &#123; margin-top: 0; &#125; .post-title &#123; font-size: 1.5em; .post-title-link &#123; color: #368CCB; text-decoration: none; &#125; &#125; .post-content &#123; a &#123; color: #368CCB; text-decoration: none; &#125; &#125; .post-meta &#123; color: #BABABA; &#125;&#125; 主题配置1234menu: Home: / Archive: /archives haha: /aaa 优化 如果您的主题太过于复杂，或是需要生成的文件量太过于庞大，可能会大幅降低性能，除了简化主题外，您可以考虑 Hexo 2.7 新增的局部缓存（Fragment Caching） 功能。 本功能借鉴于 Ruby on Rails，它储存局部内容，下次便能直接使用缓存内容，可以减少文件夹查询并使生成速度更快。 它可用于页首、页脚、侧边栏等文件不常变动的位置，举例来说： 123&lt;%- fragment_cache(&apos;header&apos;, function()&#123; return &apos;&lt;header&gt;&lt;/header&gt;&apos;;&#125;); 如果您使用局部模板的话，可以更简单： &lt;%- partial(&#39;header&#39;, {}, {cache: true}); 但是，如果您开启了 relative_link 参数的话，请勿使用局部缓存功能，因为相对链接在每个页面可能不同。 &lt;%- partial(&#39;_partial/mobile-nav&#39;, null, {cache: !config.relative_link}) %&gt;","categories":[],"tags":[{"name":"ejs","slug":"ejs","permalink":"https://shaojiaming.github.io/tags/ejs/"},{"name":"hexo","slug":"hexo","permalink":"https://shaojiaming.github.io/tags/hexo/"}]},{"title":"Tomcat集群（linux）","slug":"Tomcat集群","date":"2017-03-17T07:01:49.000Z","updated":"2017-03-18T14:23:09.361Z","comments":true,"path":"2017/03/17/Tomcat集群/","link":"","permalink":"https://shaojiaming.github.io/2017/03/17/Tomcat集群/","excerpt":"本文在red hat下进行搭建的，参考网上的搭建步骤结合自己的实际操作，从系统安装到最终的搭建进行详细的说明。","text":"本文在red hat下进行搭建的，参考网上的搭建步骤结合自己的实际操作，从系统安装到最终的搭建进行详细的说明。 目录一. 前期准备 二. 环境安装 1. 安装gcc 和g++ 2. 安装apache 3. 配置java运行环境变量 4. 配置tomcat 5. 配置JK连接器 三. 测试apache负载均衡是否生效 前期准备安装介质 : 工具 说明 rhel-server-6.4-x86_64-dvd.iso RedHat Enterprise Linux 6.4 x86 64bit tomcat-connectors-1.2.41.tar.gz Tomcat负载均衡模块 httpd-2.4.10.tar.gz Apache源码包 apr-1.5.1.tar.gz Apache依赖包 apr-util-1.5.1.tar.gz Apache依赖包 pcre-8.32.tar.gz Apache依赖包 Tomcat 7.0.75 Tomcat安装包 jdk-7u79-linux-x64.tar.gz Java运行环境 环境安装关闭linux selinux1、 root用户登录2、 cd /etc/selinux3、 vim config 设置selinux=disabledSelinux 解释：SELinux是一种基于域-类型 模型（domain-type）的强制访问控制（MAC）安全系统，它由NSA编写并设计成内核模块包含到内核中。 关闭防火墙1、 运行 service iptables status 查看防火墙状态2、 如果提示防火墙未关闭请执行以下操作3、 chkconfig iptables off (关闭防火墙-永久生效)4、 chkconfig iptables on (打开防火墙-永久生效)5、 重启服务器 reboot 安装gcc 和g++挂载光驱 123456789101112131415# mkdir /mnt/cdrom# mount -o loop -t iso9660 /opt/software/rhel-server-6.4-x86_64-dvd.iso /mnt/cdrom/# rpm -ivh /mnt/cdrom/Packages/yum-3.2.29-40.el6.noarch.rpm# vi /etc/yum.repos.d/local.repo[rhel-Server]name=Serverbaseurl=file:///mnt/cdrom/Serverenabled=1gpgcheck=0gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release# cat /etc/yum.repos.d/local.repo# yum clean all# yum list gcc*# yum install gcc.x86_64# yum install gcc-c++.x86_64 验证 安装apache(官网：http://httpd.apache.org/)123456789101112131415161718192021222324252627282930中间件存储路径/usr/local/Apache安装路径/usr/local/web/apache#tar -zxvf httpd-2.4.10.tar.gz#tar -zxvf pcre-8.32.tar.gz#tar -zxvf apr-1.5.1.tar.gz#tar -zxvf apr-util-1.5.1.tar.gz#cd pcre-8.32#./configure --prefix=/usr/local/pcre#make#make install#cd ../apr-1.5.1#./configure --prefix=/usr/local/apr#make#make install#cd ../apr-util-1.5.1#./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr#make#make install#cd ../httpd-2.4.10#./configure --prefix=/usr/local/web/apache --enable-so --enable-mods-shared=most --with-mpm=worker --enable-proxy --enable-rewrite --with-pcre=/usr/local/pcre --with-apr=/usr/local/apr --with-apr-util=/usr/local/apr-util#make#make install启动apache#/usr/local/web/apache/apachectl start 在本地打开浏览器，访问http://127.0.0.1如果出现“It Works!”则表示启动成功了 配置java运行环境变量12345678#mkdir /usr/java#tar –zxvf jdk-7u79-linux-x64.tar.gz /usr/java#vi /etc/profileexport JAVA_HOME=/usr/java/jdk1.7.0_05export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport PATH=$PATH:$JAVA_HOME/binexport JAVA_HOME CLASSPATH PATH#source /etc/profile 验证:输入javacjava –version 配置tomcat1.将tomcat分别放到两个文件夹下2.修改service.xml文件的port3.修改两台server的端口4.添加jvmRoute(配置另一台时jvmRoute=”s2”)&lt;Engine defaultHost=&quot;localhost&quot; name=&quot;Catalina&quot; jvmRoute=&quot;tomcat1&quot;&gt;5.解开注释&lt;Cluster className=&quot;org.apache.catalina.ha.tcp.SimpleTcpCluster&quot;/&gt;6.启动两台tomcat 看是否能访问到对应的测试页面 配置JK连接器1.编译jk 123456789101112# cd tomcat-connectors-1.2.32-src # cd native/# ./configure --with-apxs=/usr/local/web/apache/bin/apxs # make # ls# cd apache-2.0/# ls bldjk54.qclsrc Makefile.apxs mod_jk.a mod_jk.lobldjk.qclsrc Makefile.apxs.in mod_jk.c mod_jk.oconfig.m4 Makefile.in mod_jk.dsp mod_jk.soMakefile Makefile.vc mod_jk.la NWGNUmakefile# sudo cp ./mod_jk.so /usr/local/web/apache/modules/ 2.修改apache的httpd.conf文件添加 1234567LoadModule jk_module modules/mod_jk.so&lt;IfModule jk_module&gt; JkWorkersFile conf/workers.properties JkLogFile logs/mod_jk.log JkLogLevel warn JkMount /*.jsp loadBalanceServers&lt;/IfModule&gt; 3.在conf文件夹下面添加workers.properties文件12345678910111213141516171819202122232425--------------------------------------------------------------------------------------------------------------------------## workers.properties## list the workers by nameworker.list=loadBalanceServers# localhost server 1# ------------------------worker.s1.port=6009 //6080端口转发portworker.s1.host=localhost #tomcat的主机地址，如不为本机，请填写ip地址worker.s1.type=ajp13 #ajp13 端口号，在tomcat下server.xml配置,默认8009worker.s1.lbfactor=10 #server的加权比重，值越高，分得的请求越多# localhost server 2# ------------------------worker.s2.port=7009 //7080端口转发portworker.s2.host=localhost #tomcat的主机地址，如不为本机，请填写ip地址worker.s2.type=ajp13 #ajp13 端口号，在tomcat下server.xml配置,默认8009worker.s2.lbfactor=10 #server的加权比重，值越高，分得的请求越多worker.loadBalanceServers.type=lbworker.loadBalanceServers.balanced_workers=s1,s2 # #controller控制的tomcat的名称指定分担请求的tomcat由tomcat中的server.xml中设值worker.loadBalanceServers.sticky_session=true #会话是否有粘性，false表示无粘性，同一个会话的请求会到不同的tomcat中处理# worker.controller.retries=3 #请求失败以后重试次数# worker.controller.sticky_session_force=false #当一个节点崩了，如果设置为true，那么服务器返回500错误给客户端，如果设置为false,则转发给其他的tomcat，但是会丢失回话信息 4.重启apache 测试apache负载均衡是否生效 创建两个项目test 在index.jsp中分别添加如下代码12&lt;%session.setAttribute(\"id\",\"123\");%&gt;&lt;%=session.getAttribute(\"id\")%&gt; 分别重启两台tomcat服务器, 在两台浏览器中输入http://10.46.2.10/test/index.jsp","categories":[{"name":"力量之源","slug":"力量之源","permalink":"https://shaojiaming.github.io/categories/力量之源/"}],"tags":[{"name":"java","slug":"java","permalink":"https://shaojiaming.github.io/tags/java/"},{"name":"tomcat","slug":"tomcat","permalink":"https://shaojiaming.github.io/tags/tomcat/"},{"name":"apache","slug":"apache","permalink":"https://shaojiaming.github.io/tags/apache/"}]}]}